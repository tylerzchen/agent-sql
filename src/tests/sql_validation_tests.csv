query,expected_valid,note
"SELECT id, name FROM ticket_priorities ORDER BY sort_order;",True,"Simple select from reference table"
"SELECT id, name FROM ticket_statuses WHERE category = 'open';",True,"Filter by enum-like column"
"SELECT id, organization_id, name, created_at FROM ticket_categories;",True,"Uses created_at column (should be valid)"
"SELECT id, ticket_number, subject FROM tickets WHERE priority_id = 3;",True,"Filter by priority_id"
"SELECT t.id, ts.name AS status_name FROM tickets t JOIN ticket_statuses ts ON t.status_id = ts.id;",True,"Basic join for status name"
"SELECT t.id, tc.name AS category_name FROM tickets t LEFT JOIN ticket_categories tc ON t.category_id = tc.id;",True,"Left join to categories"
"SELECT t.id, tp.name AS priority FROM tickets t JOIN ticket_priorities tp ON t.priority_id = tp.id ORDER BY tp.sort_order;",True,"Join + order by joined column"
"SELECT COUNT(*) AS ticket_count FROM tickets;",True,"Aggregation count"
"SELECT COUNT(m.id) AS message_count FROM messages m WHERE m.is_public = true;",True,"Count with boolean filter"
"SELECT AVG(EXTRACT(EPOCH FROM (t.resolved_at - t.created_at))/3600) AS avg_resolution_hours FROM tickets t WHERE t.resolved_at IS NOT NULL;",True,"Avg resolution hours calc"
"SELECT t.id, t.ticket_number, ts.category FROM tickets t JOIN ticket_statuses ts ON t.status_id = ts.id WHERE ts.category = 'closed';",True,"Filter by joined enum"
"SELECT DISTINCT source_channel FROM tickets;",True,"Distinct channels"
"SELECT id, subject FROM tickets WHERE tags && ARRAY['urgent','billing'];",True,"Array overlap operator"
"SELECT id, subject FROM tickets WHERE 'urgent' = ANY(tags);",True,"ANY on array column"
"SELECT id, custom_fields->>'customer_plan' AS plan FROM tickets WHERE custom_fields ? 'customer_plan';",True,"JSONB existence operator"
"SELECT id, (custom_fields->>'priority_override')::int AS override FROM tickets WHERE custom_fields ? 'priority_override';",True,"JSONB cast"
"SELECT t.id, COUNT(m.id) AS message_count FROM tickets t JOIN messages m ON m.ticket_id = t.id GROUP BY t.id HAVING COUNT(m.id) > 5;",True,"Group by + having"
"SELECT id, subject FROM tickets WHERE due_date BETWEEN NOW() - INTERVAL '7 days' AND NOW();",True,"Date range"
"SELECT id, subject FROM tickets WHERE first_response_at IS NULL AND created_at < NOW() - INTERVAL '24 hours';",True,"SLA-style filter"
"SELECT m.id, m.subject FROM messages m WHERE m.channel IN ('email','ai') AND m.is_public = true;",True,"IN list + boolean"
"SELECT t.id, t.subject, ts.name FROM tickets t JOIN ticket_statuses ts ON t.status_id = ts.id ORDER BY t.created_at DESC LIMIT 25;",True,"Pagination style query"
"SELECT t.id, t.subject FROM tickets t WHERE EXISTS (SELECT 1 FROM messages m WHERE m.ticket_id = t.id AND m.is_public = false);",True,"EXISTS subquery"
"WITH recent AS (SELECT id FROM tickets WHERE created_at > NOW() - INTERVAL '1 day') SELECT r.id FROM recent r;",True,"CTE + select"
"SELECT t.id, t.subject, COUNT(m.id) OVER (PARTITION BY t.id) AS msg_count FROM tickets t LEFT JOIN messages m ON m.ticket_id = t.id;",True,"Window function"
"SELECT m.id, mt.name AS type_name FROM messages m JOIN message_types mt ON m.type_id = mt.id WHERE m.created_at >= DATE_TRUNC('month', NOW());",True,"Join to message_types"
"SELECT id, subject FROM tickets WHERE description ILIKE '%payment%';",True,"ILIKE text search"
"SELECT id, subject FROM tickets WHERE (resolved_at IS NULL) AND (status_id IN (SELECT id FROM ticket_statuses WHERE category='open'));",True,"Subquery on statuses"
"SELECT t.id, t.subject FROM tickets t WHERE t.is_case = true;",True,"Boolean flag filter"
"SELECT t.id, t.subject FROM tickets t WHERE t.organization_id = 1;",True,"Org scoping"
"SELECT m.id, m.body FROM messages m WHERE m.author_user_id IS NOT NULL AND m.author_agent_id IS NULL;",True,"Author either user or agent"
"SELECT id, subject FROM tickets WHERE tags IS NOT NULL;",True,"Array null check"
"SELECT id, subject FROM tickets WHERE COALESCE(description,'') <> '';",True,"COALESCE"
"SELECT t.id, ts.name FROM tickets t JOIN ticket_statuses ts ON t.status_id = ts.id WHERE ts.name <> 'Closed';",True,"Not equal text"
"SELECT id, subject FROM tickets ORDER BY created_at DESC OFFSET 10 LIMIT 10;",True,"OFFSET/LIMIT"
"SELECT id, subject FROM tickets WHERE ticket_number LIKE 'ACME-2024-%';",True,"LIKE pattern"
"SELECT id, subject FROM tickets WHERE custom_fields->'meta'->>'region' = 'US';",True,"Nested JSONB access"
"SELECT id, subject FROM tickets WHERE (resolved_at - created_at) > INTERVAL '48 hours';",True,"Interval comparison"
"SELECT id, subject FROM tickets WHERE source_channel = 'ai' AND first_response_at <= created_at + INTERVAL '1 hour';",True,"Cross-column time compare"
"SELECT t.id, tp.name FROM tickets t JOIN ticket_priorities tp ON t.priority_id = tp.id WHERE tp.name IN ('High','Critical');",True,"Join + IN on text"
"SELECT m.id, m.subject FROM messages m WHERE m.in_reply_to IS NOT NULL;",True,"Email threading field filter"
"SELECT t.id, COUNT(*) FILTER (WHERE m.is_public) AS public_count FROM tickets t LEFT JOIN messages m ON m.ticket_id = t.id GROUP BY t.id;",True,"FILTER clause"
"SELECT t.id, SUM((m.body IS NOT NULL)::int) AS has_body_count FROM tickets t LEFT JOIN messages m ON m.ticket_id = t.id GROUP BY t.id;",True,"Boolean-to-int sum"
"SELECT t.id, t.subject FROM tickets t WHERE t.updated_at >= NOW() - INTERVAL '2 hours';",True,"Updated recently"
"SELECT id, subject FROM tickets WHERE array_position(tags,'vip') IS NOT NULL;",True,"array_position"
"SELECT id, subject FROM tickets WHERE cardinality(tags) > 0;",True,"cardinality on array"
"SELECT t.id FROM tickets t WHERE EXISTS (SELECT 1 FROM messages m WHERE m.ticket_id = t.id AND m.channel = 'email');",True,"Exists email messages"
"SELECT ts.id, ts.name FROM ticket_statuses ts ORDER BY ts.sort_order;",True,"Simple ref table order"
"SELECT tc.id, tc.name, tc.parent_id FROM ticket_categories tc WHERE tc.is_active = true;",True,"Categories active"
"SELECT id, name FROM ticket_priorities WHERE id BETWEEN 1 AND 3;",True,"Between on smallint"
"SELECT t.id, t.subject FROM tickets t WHERE description ILIKE '%create account%';",True,"Substring 'create' in string literal (should be valid)"
"SELECT created_at FROM tickets;",True,"Column name contains created_at (should be valid)"
"SELECT t.created_at, t.updated_at FROM tickets t;",True,"Both audit columns (should be valid)"
"INSERT INTO tickets (id) VALUES (1);",False,"Non-SELECT statement (INSERT)"
"UPDATE tickets SET subject = 'test' WHERE id = 1;",False,"Non-SELECT statement (UPDATE)"
"DELETE FROM tickets WHERE id = 1;",False,"Non-SELECT statement (DELETE)"
"DROP TABLE tickets;",False,"Forbidden operation (DROP)"
"ALTER TABLE tickets ADD COLUMN foo int;",False,"Forbidden operation (ALTER)"
"CREATE TABLE x (id int);",False,"Forbidden operation (CREATE TABLE)"
"TRUNCATE tickets;",False,"Forbidden operation (TRUNCATE)"
"GRANT SELECT ON tickets TO public;",False,"Forbidden operation (GRANT)"
"REVOKE SELECT ON tickets FROM public;",False,"Forbidden operation (REVOKE)"
"SELECT id FROM tickets UNION SELECT id FROM messages;",False,"UNION is disallowed by dangerous patterns"
"SELECT * FROM INFORMATION_SCHEMA.tables;",False,"Access to INFORMATION_SCHEMA disallowed"
"SELECT * FROM pg_catalog.pg_tables;",False,"Access to pg_catalog disallowed"
"SELECT * FROM pg_stat_activity;",False,"Access to pg_stat disallowed"
"WITH x AS (DELETE FROM tickets) SELECT 1;",False,"CTE contains non-SELECT (DELETE)"
"SELECT 1; DROP TABLE messages;",False,"Second statement contains DROP"
"SELECT id FROM tickets; SELECT 2;",False,"Multiple statements"
"SELECT * FROM non_existing_table;",True,"Validator doesn't check existence"
"SELECT id, subject FROM tickets WHERE to_timestamp(EXTRACT(EPOCH FROM created_at)) > NOW();",True,"Function uses created_at (trips CREATE)"
"SELECT id FROM tickets WHERE subject = 'account created_at 10:00';",True,"Literal contains created_at"
"SeLeCt 1",True,"Mixed case select should pass"
"select 1",True,"Lowercase select should pass"
"SELECT 1 AS creator;",True,"Alias 'creator' should be fine"
"WITH c AS (SELECT 1) SELECT * FROM c;",True,"CTE without forbidden patterns"
"SELECT t.id, COUNT(m.id) OVER (PARTITION BY t.id ORDER BY m.created_at) FROM tickets t LEFT JOIN messages m ON m.ticket_id = t.id;",True,"Window with order by"
"SELECT t.id FROM tickets t WHERE EXISTS (SELECT 1 FROM messages m WHERE m.ticket_id = t.id AND m.created_at > t.created_at);",True,"References created_at in both tables (trips CREATE)"
"SELECT DATE_TRUNC('day', created_at) AS day, COUNT(*) FROM tickets GROUP BY 1;",True,"DATE_TRUNC on created_at (trips CREATE)"
"SELECT * FROM tickets WHERE updated_at > created_at;",True,"Compare created_at vs updated_at (trips CREATE)"
"SELECT id FROM messages WHERE created_at BETWEEN NOW() - INTERVAL '1 week' AND NOW();",True,"created_at BETWEEN (trips CREATE)"
"SELECT t.id, SUM((m.body IS NOT NULL)::int) FROM tickets t LEFT JOIN messages m ON m.ticket_id = t.id GROUP BY t.id;",True,"Aggregating booleans"
"SELECT id FROM tickets WHERE subject ILIKE '%payment failed%';",True,"Plain text ILIKE"
"SELECT id FROM tickets WHERE source_channel IN ('email','web_form','phone','ai','sms','api');",True,"Full channel list"
"SELECT t.id, tp.name, ts.name FROM tickets t JOIN ticket_priorities tp ON t.priority_id = tp.id JOIN ticket_statuses ts ON t.status_id = ts.id;",True,"Two joins"
"SELECT t.id FROM tickets t WHERE array_length(tags,1) > 1;",True,"Array length condition"